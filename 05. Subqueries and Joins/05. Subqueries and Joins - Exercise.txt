00. Demo

 SELECT JobTitle
	AVG (Salary)
     AS AverageSalary,
        COUNT (EmployeeID)
     AS WorkerCount
   FROM Employees
GROUP BY JobTitle
 HAVING AVG (Salary) > 20000

---------------------------------------------------------------------------------------------
01. Employee Address

    SELECT TOP 5
	       e.EmployeeID,
           e.JobTitle,
           e.AddressID,
           a.AddressText
      FROM Employees 
	    AS e 
 LEFT JOIN Addresses -- използваме LEFT JOIN, защото в таблицата Employees в колоната AddressID е зададено NULL 
                     -- и е възможно да изпуснем работник, който не е въвел адрес
	    AS a 
	    ON e.AddressID = a.AddressID
  ORDER BY e.AddressID

-------------------------------------------------------------------------------------------------

02. Addresses with Towns

SELECT TOP 50
       e.FirstName,
       e.LastName,
       t.[Name] AS Town,
       a.AddressText
  FROM Employees AS e
  LEFT JOIN Addresses AS a ON e.AddressID = a.AddressID
  LEFT JOIN Towns AS t ON a.TownID= t.TownID
ORDER BY e.FirstName,
         e.LastName

------------------------------------------------------------------------------------------------

03. Sales Employee

SELECT 
        e.EmployeeID,
	e.FirstName,
	e.LastName,
	d.[Name] AS DepartmentName
   FROM Employees AS e JOIN Departments AS d 
     ON e.DepartmentID = d.DepartmentID 
    AND d.[Name] = 'Sales'
ORDER BY e.EmployeeID

--------------------------------------------------------------------------------------------------

04. Employee Departments

SELECT TOP 5
       e.EmployeeId,
	   e.FirstName,
	   e.Salary,
	   d.[Name] AS DepartmentName
  FROM Employees AS e
  JOIN Departments AS d ON e.DepartmentID = d.DepartmentID 
   AND e.Salary > 15000
ORDER BY e.DepartmentID 

--------------------------------------------------------------------------------------------------

05. Employees Without Project

 SELECT TOP 3
	  e.EmployeeID,
	  e.FirstName
     FROM Employees AS e
LEFT JOIN EmployeesProjects AS ep 
       ON e.EmployeeID = ep.EmployeeID
    WHERE ep.ProjectID IS NULL
 ORDER BY e.EmployeeID

 -- използваме LEFT JOIN с идеята, че ако работника няма проект, в дясната таблица
 -- за номер на проект ще се изпише NULL, дори по условие да е зададено,
 -- че там е NOT NULL. С LEFT JOIN се показва, че там няма запис, който да има връза с лявата таблица

-------------------------------------------------------------------------------------------------

06. Employees Hired After

SELECT 
	 e.FirstName,
	 e.LastName,
	 e.HireDate,
	 d.[Name] AS DeptName
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID 
AND e.HireDate > 1999-01-01
AND d.[Name] IN ('Sales', 'Finance')
ORDER BY e.HireDate

--------------------------------------------------------------------------------------------------

07. Employees With Project

SELECT TOP 5
	 e.EmployeeID,
	 e.FirstName,
	 p.[Name] AS ProjectName
FROM EmployeesProjects AS ep
JOIN Employees AS e ON ep.EmployeeID = e.EmployeeID
JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE p.StartDate > '2002-08-13' AND p.EndDate IS NULL
ORDER BY e.EmployeeID

------------------------------------------------------------------------------------------------

08. Employee 24

SELECT 
	 e.EmployeeID,
	 e.FirstName,	
	 CASE 
	       WHEN YEAR(p.[StartDate]) >= 2005 THEN NULL
           ELSE p.[Name]
	 END 
	 AS ProjectName	 
FROM EmployeesProjects AS ep
JOIN Employees AS e ON ep.EmployeeID = e.EmployeeID
JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE e.EmployeeID=24 

-----------------------------------------------------------------------------------------------

09. Employee Manager

  SELECT
		 e.EmployeeID,
		 e.FirstName,
		 e.ManagerID,
		 m.FirstName AS ManagerName
    FROM Employees AS e
    JOIN Employees AS m ON e.ManagerID= m.EmployeeID
   WHERE e.ManagerID IN (3,7)
ORDER BY e.EmployeeID

------------------------------------------------------------------------------------------------

10. Employees Summary

	SELECT 
	 TOP 50
          e.EmployeeID,
	  CONCAT_WS(' ', e.FirstName, e.LastName) AS EmployeeName,
	  CONCAT_WS(' ', m.FirstName, m.LastName) AS ManagerName,
          d.[Name] AS DepartmentName
     FROM Employees AS e 
LEFT JOIN Employees AS m ON e.ManagerID = m.EmployeeID 
LEFT JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
 ORDER BY e.EmployeeID

-----------------------------------------------------------------------------------------------

11. Min Average Salary

SELECT 
   MIN (a.AverageSalary) AS MinAverageSalary
  FROM
	 (
	 SELECT
	        e.DepartmentID,
	    AVG (e.Salary) AS AverageSalary
	   FROM Employees AS e
	 GROUP BY e.DepartmentID		
	 )
	AS a

---------------------------------------------------------------------------------------------

12. Highest Peaks in Bulgaria

USE [Geography]
GO

  SELECT 
	 	 mc.CountryCode,
	 	 m.MountainRange,
		 p.PeakName,
		 p.Elevation
	FROM MountainsCountries AS mc 
	JOIN Countries AS c ON mc.CountryCode = c.CountryCode
	JOIN Mountains AS m ON mc.MountainId = m.Id 
    JOIN Peaks AS p ON p.MountainId = m.Id
   WHERE c.CountryName = 'Bulgaria'
     AND p.Elevation > 2835
ORDER BY p.Elevation DESC

-------------------------------------------------------------------------------------------------

13. Count Mountain Ranges

SELECT CountryCode,
 COUNT (MountainId) AS MountainRanges
  FROM MountainsCountries
 WHERE CountryCode IN 
				(
				SELECT CountryCode
				  FROM Countries
				 WHERE CountryName IN ('United States', 'Russia', 'Bulgaria')
				)
GROUP BY CountryCode

------------------------------------------------------------------------------------------------

14. Countries With or Without Rivers

SELECT TOP 5
		c.CountryName,
		r.RiverName
FROM Countries AS c
LEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
LEFT JOIN Rivers AS r ON cr.RiverId = r.Id
JOIN Continents AS cont ON c.ContinentCode = cont.ContinentCode
WHERE cont.ContinentName = 'Africa'
ORDER BY c.CountryName

-------------------------------------------------------------------------------------------

15. Continents and Currencies

-- method 1
  SELECT ContinentCode,
         CurrencyCode, 
	 CurrencyUsage
    FROM (
		SELECT 
			*,
			DENSE_RANK () OVER (PARTITION BY ContinentCode ORDER BY CurrencyUsage DESC)
			AS CurrencyRank
		FROM (
				SELECT ContinentCode,
			 	       CurrencyCode,
			 	 COUNT (*) AS CurrencyUsage
				  FROM Countries 
			      GROUP BY ContinentCode, CurrencyCode
			        HAVING COUNT (*) > 1
		      ) AS CurrencyUsageSubquery
	) AS CurrencyRankingSubquery
 WHERE CurrencyRank=1


 -- method 2
 SELECT rc.ContinentCode,
        rc.CurrencyCode,
        rc.Count
   FROM
   (
	 SELECT 
	         c.ContinentCode,
	         c.CurrencyCode,
	   COUNT (c.CurrencyCode) AS Count,
	   DENSE_RANK ()
	      OVER (PARTITION BY c.ContinentCode ORDER BY COUNT (c.CurrencyCode) DESC) AS [rank]
	 FROM Countries AS c
	 GROUP BY c.ContinentCode, c.CurrencyCode
    ) AS rc
 WHERE rc.[rank] =1 AND rc.Count >1

------------------------------------------------------------------------------------------------

16. Countries Without Any Mountains

    SELECT 
	  COUNT(c.CountryCode) AS [Count]
     FROM Countries AS c
LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
    WHERE MountainId IS NULL

-----------------------------------------------------------------------------------------------

17.Highest Peak and Longest River by Country

SELECT
		  TOP (5) 
	  	  c.CountryName,
		  MAX (p.Elevation) AS HighestPeakElevation,
		  MAX (r.[Length]) AS LongestRiverLength       
     FROM Countries AS c
LEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
LEFT JOIN Mountains AS m ON mc.MountainId = m.Id
LEFT JOIN Peaks AS p ON m.Id = p.MountainId
 GROUP BY c.CountryName
 ORDER BY HighestPeakElevation DESC,
		  LongestRiverLength DESC,
		  CountryName

---------------------------------------------------------------------------------------------

18. Highest Peak Name and Elevation by Country

  SELECT 
         TOP 5
		 CountryName AS Country,
		   CASE
			  WHEN PeakName IS NULL THEN '(no highest peak)'
			  ELSE PeakName
		   END 
		 AS [Highest Peak Name],
		   CASE
			  WHEN Elevation IS NULL THEN 0
			  ELSE Elevation
		   END 
		 AS [Highest Peak Elevation],
		   CASE
		  	  WHEN MountainRange IS NULL THEN '(no mountain)'
			  ELSE MountainRange
		   END 
		 AS [Mountain]

  FROM   ( 
		  SELECT c.CountryName,
				  p.PeakName,
				  p.Elevation,
				  m.MountainRange,
				  DENSE_RANK () OVER (PARTITION BY c.CountryName ORDER BY p.Elevation DESC) AS PeakRank
			 FROM Countries AS c
		LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
		LEFT JOIN Mountains AS m ON mc.MountainId = m.Id
		LEFT JOIN Peaks AS p ON m.Id = p.MountainId
	     ) AS PeakRankingSubquery
   WHERE  PeakRank=1
   ORDER BY Country,
	    [Highest Peak Name] 
  
----------------- оптимизираме кода по този начин-----------------------------------------------
    SELECT 
         TOP 5
		 CountryName AS Country,
		 ISNULL (PeakName, '(no highest peak)')  AS [Highest Peak Name],
		 ISNULL (Elevation, 0) AS [Highest Peak Elevation],
		 ISNULL (MountainRange, '(no mountain)') AS [Mountain]

  FROM   ( 
		  SELECT c.CountryName,
				  p.PeakName,
				  p.Elevation,
				  m.MountainRange,
				  DENSE_RANK () OVER (PARTITION BY c.CountryName ORDER BY p.Elevation DESC) AS PeakRank
			 FROM Countries AS c
		LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
		LEFT JOIN Mountains AS m ON mc.MountainId = m.Id
		LEFT JOIN Peaks AS p ON m.Id = p.MountainId
	     ) AS PeakRankingSubquery
   WHERE  PeakRank=1
   ORDER BY Country,
	    [Highest Peak Name] 
  
  
 

  
 




