01. Employees with Salary Above 35000

USE SoftUniLab
GO

-- в Judge не пишем CREATE OR ALTER, защото не го приема, пишем само CREATE PROCEDURE
CREATE OR ALTER PROCEDURE usp_GetEmployeesSalaryAbove35000
              AS
	   BEGIN
		SELECT
		       FirstName,
		       LastName
		       FROM Employees
		       WHERE Salary > 35000		  
             END

EXEC dbo.usp_GetEmployeesSalaryAbove35000  -- по този начин извикваме изпълнението на процедурата
-------------------------------------------------------------------------------------------------

02. Employees with Salary Above Number

CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber @minSalary DECIMAL (18,4)
	      AS
	   BEGIN
		SELECT
		       FirstName,
		       LastName
		  FROM Employees
		 WHERE Salary >= @minSalary			
	     END

-- извикваме процедурата със зададен параметър @minSalary = 48100
EXEC dbo.usp_GetEmployeesSalaryAboveNumber 48100
------------------------------------------------------------------------------------------------

03. Town Names Starting With

CREATE PROCEDURE usp_GetTownsStartingWith @startLetter VARCHAR(10)
	      AS
	   BEGIN
		SELECT Name
	  	  FROM Towns
		 WHERE LOWER(LEFT([Name], LEN(@startLetter))) = LOWER(@startLetter)		   
	    END
--------------------------------------------------------------------------------------------------

04. Employees from Town

CREATE PROCEDURE usp_GetEmployeesFromTown @townName VARCHAR(50)
	      AS
	   BEGIN
		SELECT 
  		       FirstName AS [First Name],
		       LastName AS [Last Name]
		  FROM Employees AS e
		  JOIN Addresses AS a ON e.AddressID = a.AddressID
		  JOIN Towns AS t ON a.TownID = t.TownID							 WHERE t.[Name] = @townName		
             END

EXEC dbo.usp_GetEmployeesFromTown 'Sofia'
-------------------------------------------------------------------------------------------------

05. Salary Level Function

  CREATE OR ALTER FUNCTION ufn_GetSalaryLevel(@Salary MONEY)
 RETURNS NVARCHAR(10)
               AS
            BEGIN
                DECLARE @salaryLevel VARCHAR(8)
                     IF (@Salary < 30000) SET @salaryLevel ='Low'
                ELSE IF (@Salary <= 50000) SET @salaryLevel = 'Average'
               ELSE SET @salaryLevel = 'High'
                 RETURN @salaryLevel
              END;
-------------------------------------------------------------------------------------------------

06. Employees by Salary Level


CREATE PROC usp_EmployeesBySalaryLevel @salaryLevel VARCHAR (8)
	 AS
      BEGIN
	  SELECT 
		FirstName AS [First Name],				
		LastName AS [Last Name]
	   FROM Employees 
          WHERE dbo.ufn_GetSalaryLevel(Salary)= @salaryLevel	   
      END

-- извикваме изпълнението на процедурата, в която сме използвали функцията dbo.ufn_GetSalaryLevel(Salary)
EXEC dbo.usp_EmployeesBySalaryLevel 'High'
-----------------------------------------------------------------------------------------------

07. Define Function

CREATE FUNCTION ufn_IsWordComprised (@setOfLetters VARCHAR (50), @word VARCHAR (50))
   	RETURNS BIT -- връща като резултат 0 или 1 
	         AS
	      BEGIN
		   DECLARE @wordIndex INT =1;
		     WHILE (@wordIndex<= LEN(@word))
		    	   BEGIN
		                DECLARE @currentCharacter CHAR = SUBSTRING (@word, @wordIndex, 1);
			             IF (CHARINDEX(@currentCharacter, @setOfLetters)=0) -- CHARINDEX - проверява дали дадена буква се съдържа в думата
					   BEGIN
					      RETURN 0;
					   END
			             SET @wordIndex +=1;
		           END
	            RETURN 1;		   
	      END


SELECT dbo.ufn_IsWordComprised ('oistmiahf', 'Sofia')  -- => връща 1
SELECT dbo.ufn_IsWordComprised ('halves', 'Sofia')  -- => връща 0
--------------------------------------------------------------------------------------------------

08. Delete Employees and Departments

CREATE PROCEDURE usp_DeleteEmployeesFromDepartment (@departmentId INT)
	      AS
           BEGIN  -- създаваме таблица, в която ще съхраним Id-тата на всички работници, които ще изтрием
				DECLARE @employeesToDelete TABLE (Id INT)

				INSERT INTO @employeesToDelete 				
			    	            SELECT EmployeeId
				              FROM Employees
				             WHERE DepartmentID = @departmentId

			-- работниците, които се каним да изтрием, могат да работят по някакви проекти = > трябва да откачим
			-- релациите от Employees към EmployeesProjects

			DELETE 
			  FROM EmployeesProjects
			 WHERE EmployeeID IN ( SELECT Id FROM @employeesToDelete)
				
				-- работниците, които искаме да изтрием, могат да са мениджъри на някои отдели, затова 
				-- трябва да задедем NULL на ManagerID във всички отдели, в които ще трием
				-- 1. Редактираме колоната ManagerID с ALTER 

				ALTER TABLE Departments
				ALTER COLUMN ManagerID INT 

				UPDATE Departments
				SET ManagerID = NULL
				WHERE ManagerID IN (SELECT Id FROM @employeesToDelete)

				-- работник, който искаме да изтрием, може ад бъде мениджър на друг работник. Затова 
				-- трябва да зададем NULL на ManagerID на всички работници с изтрити мениджъри

				UPDATE Employees
				SET ManagerID = NULL
				WHERE ManagerID IN (SELECT Id FROM @employeesToDelete)

				-- вече сме откачили всички релации и можем да трием записите от таблицата Employees

				DELETE 
				FROM Employees
				WHERE DepartmentID = @departmentId

				-- изтриваме и отдела
				DELETE 
				FROM Departments
				WHERE DepartmentID = @departmentId

				-- Правим заявка, която показва колко са останалите записи в отдела => 0, защото сме изтрили целия отдел 
				SELECT COUNT(*) 
				FROM Departments
				WHERE DepartmentID = @departmentId
             END

	EXEC dbo.usp_DeleteEmployeesFromDepartment 5
-------------------------------------------------------------------------------------------------

09. Find Full Name

USE Bank
GO

CREATE PROCEDURE usp_GetHoldersFullName
              AS
           BEGIN
                 SELECT 
		        CONCAT_WS(' ', FirstName, LastName) AS [Full Name]
	           FROM AccountHolders			 
 	   END
--------------------------------------------------------------------------------------------------

10. People With Balance Higher Than

CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan (@amount MONEY)
	      AS
           BEGIN 
		SELECT 
		       ac.FirstName AS [First Name],
		       ac.LastName AS [Last Name]
		  FROM AccountHolders AS ac
		  JOIN Accounts AS a ON ac.Id = a.AccountHolderId
              GROUP BY ac.FirstName, ac.LastName
                HAVING SUM(a.Balance) > @amount 
	      ORDER BY ac.FirstName, 
		       ac.LastName
          END

EXEC dbo.usp_GetHoldersWithBalanceHigherThan 30000
-------------------------------------------------------------------------------------------------

11. Future Value Function

CREATE OR ALTER FUNCTION ufn_CalculateFutureValue 
(
@sum DECIMAL (18,4), 
@yearlyInterestRate FLOAT, 
@years INT
)
RETURNS DECIMAL (18,4)
		     AS
		  BEGIN		  
		      DECLARE @result DECIMAL(18,4)
		          SET @result = (@sum * POWER((1 + @yearlyInterestRate), @years))
		       RETURN ROUND(@result, 4)
		  END  

SELECT dbo.ufn_CalculateFutureValue(1000, 0.1, 5)
------------------------------------------------------------------------------------------------

12. Calculating Interest

CREATE OR ALTER PROCEDURE usp_CalculateFutureValueForAccount (@accountId INT, @yearlyInterestRate FLOAT)
		 AS
	      BEGIN
		  SELECT 
			 a.Id AS [Account Id],
			 ac.FirstName AS [First Name],
			 ac.LastName AS [Last Name],
			 a.Balance AS [Current Balance],
			 dbo.ufn_CalculateFutureValue(a.Balance,  @yearlyInterestRate, 5) AS [Balance in 5 years]
		    FROM AccountHolders AS ac
	  	    JOIN Accounts AS a ON ac.Id = a.AccountHolderId
		   WHERE a.Id = @accountId
	      END

 EXEC dbo.usp_CalculateFutureValueForAccount 1, 0.1 -- тук не трябва да има скоби при изброяването на параметрите
----------------------------------------------------------------------------------------------------------------

13. Table-valued Function: Cash in User Games Odd Rows

USE Diablo
GO

CREATE FUNCTION ufn_CashInUsersGames(@gameName NVARCHAR (50))
  RETURNS TABLE 
             AS
         RETURN 
			(
			SELECT 
				  SUM (Cash) AS SumCash
			  FROM
			       (
					 SELECT g.[Name],
							ug.Cash,
							ROW_NUMBER() OVER (ORDER BY ug.Cash DESC) AS RowNumber
					   FROM UsersGames AS ug
					   JOIN Games AS g ON ug.GameId = g.Id
					   WHERE g.[Name] = @gameName) 
				 AS RankingSubquery
			  WHERE RowNumber %2 <> 0
			 )

	SELECT * FROM dbo.ufn_CashInUsersGames('Love in a mist')



 


		
