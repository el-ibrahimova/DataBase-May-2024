01. Database design

CREATE TABLE Passengers(
Id INT IDENTITY PRIMARY KEY,
[Name] NVARCHAR(80) NOT NULL
)

CREATE TABLE Towns(
Id INT IDENTITY PRIMARY KEY,
[Name] VARCHAR(30) NOT NULL
)

CREATE TABLE RailwayStations(
Id INT IDENTITY PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL,
TownId INT FOREIGN KEY REFERENCES Towns(Id) NOT NULL
)

CREATE TABLE Trains(
Id INT IDENTITY PRIMARY KEY,
HourOfDeparture VARCHAR(5) NOT NULL,
HourOfArrival VARCHAR(5) NOT NULL,
DepartureTownId INT FOREIGN KEY REFERENCES Towns(Id) NOT NULL,
ArrivalTownId INT FOREIGN KEY REFERENCES Towns(Id) NOT NULL
)

CREATE TABLE TrainsRailwayStations(
TrainId INT FOREIGN KEY REFERENCES Trains(Id) NOT NULL,
RailwayStationId INT FOREIGN KEY REFERENCES RailwayStations(Id) NOT NULL,
CONSTRAINT PK_TrainsRailwayStations PRIMARY KEY (TrainId, RailwayStationId )
)

CREATE TABLE MaintenanceRecords(
Id INT IDENTITY PRIMARY KEY,
DateOfMaintenance DATE NOT NULL,
Details VARCHAR(2000) NOT NULL,
TrainId INT FOREIGN KEY REFERENCES Trains(Id) NOT NULL
)

CREATE TABLE Tickets(
Id INT IDENTITY PRIMARY KEY,
Price DECIMAL(10,2) NOT NULL,
DateOfDeparture DATE NOT NULL,
DateOfArrival DATE NOT NULL,
TrainId INT FOREIGN KEY REFERENCES Trains(Id) NOT NULL,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL
)
------------------------------------------------------------------------------------------------

02. Insert

INSERT INTO Trains (HourOfDeparture, HourOfArrival, DepartureTownId,ArrivalTownId)
VALUES
('07:00',	'19:00',	1,	3),
('08:30',	'20:30',	5,	6),
('09:00',	'21:00',	4,	8),
('06:45',	'03:55',	27,	7),
('10:15',	'12:15',	15,	5);

INSERT INTO TrainsRailwayStations (TrainId,	RailwayStationId)
VALUES
(36,	1),
(36,	4),
(36,	31),
(36,	57),
(36,	7),	
(37,	13),	
(37,	54),	
(37,	60),
(37,	16),
(38,	10),
(38,	50),
(38,	52),
(38,	22),
(39,	68),
(39,	3),
(39,	31),
(39,	19),
(40,	41),
(40,	7),
(40,	52),
(40,	13);
---------------------------------------------------------------------------------------------

03.Update 

UPDATE Tickets
   SET DateOfArrival=  DATEADD(DAY, 7, DateOfArrival),
       DateOfDeparture = DATEADD(DAY, 7, DateOfDeparture)
 WHERE DateOfDeparture> '2023-10-31'
 --WHERE DATEPART (MONTH, DateOfDeparture) >10
------------------------------------------------------------------------------------------------

04. Delete

- ще използваме транзакция, за да можем да възстановим данните, ако Delete не мине през цялата база

BEGIN TRANSACTION

DELETE 
FROM TrainsRailwayStations
WHERE TrainId =7;

DELETE 
FROM Tickets
WHERE TrainId =7;

DELETE 
FROM MaintenanceRecords
WHERE TrainId =7;

DELETE 
FROM Trains 
WHERE DepartureTownId IN (SELECT Id FROM Towns WHERE [Name] = 'Berlin')

ROLLBACK TRANSACTION
-------------------------------------------------------------------------------

05. Tickets by Price and Date of Departure

  SELECT 
	 DateOfDeparture,
 	 Price AS TicketPrice
    FROM Tickets
ORDER BY Price, DateOfDeparture DESC
--------------------------------------------------------------------------------

06. Passengers with their Tickets

  SELECT 
         p.[Name] AS PassengerName,
         t.Price AS TicketPrice,
         t.DateOfDeparture,
         t.TrainId
    FROM Passengers AS p
    JOIN Tickets AS t ON p.Id =t.PassengerId
ORDER BY t.Price DESC,
         p.[Name]
------------------------------------------------------------------------------

07. Railway Stations without Passing Trains

  SELECT 
         t.[Name] AS Town,
         rs.[Name] AS RailwayStation
    FROM RailwayStations AS rs
    JOIN Towns AS t ON rs.TownId = t.Id
WHERE rs.Id NOT IN 
         (SELECT RailwayStationId FROM TrainsRailwayStations)
ORDER BY t.[Name], rs.[Name]
------------------------------------------------------------------------------

08. First 3 Trains Between 08:00 and 08:59

  SELECT TOP 3
	 tr.Id AS TrainId,
	 tr.HourOfDeparture,
	 tic.Price AS TicketPrice,
	 tw.[Name] AS Destination
    FROM Tickets AS tic
    JOIN Trains AS tr ON tic.TrainId = tr.Id
    JOIN Towns AS tw ON tr.ArrivalTownId = tw.Id
   WHERE (tr.HourOfDeparture BETWEEN '08:00' AND '08:59')
     AND tic.Price >50
ORDER BY tic.Price
--------------------------------------------------------------------------------

09. Count of Passengers Paid More Than Average

SELECT 
     tw.[Name] AS TownName, 
     COUNT( tic.Id )AS PassengersCount
FROM Tickets AS tic 
JOIN Trains AS tr ON tic.TrainId = tr.Id
JOIN Towns AS tw ON tr.ArrivalTownId = tw.Id
WHERE tic.Price > 76.99
GROUP BY tw.[Name]
ORDER BY tw.[Name]
--------------------------------------------------------------------------------

10. Maintenance Inspection with Town and Station

  SELECT 
         t.Id AS TrainID,
         tw.[Name] AS DepartureTown,
         m.Details AS Details
    FROM Trains AS t
    JOIN MaintenanceRecords AS m ON t.Id = m.TrainId
    JOIN Towns AS tw ON tw.Id=t.DepartureTownId
   WHERE m.Details LIKE '%inspection%'
ORDER BY t.Id
---------------------------------------------------------------------------------

11.Towns with Trains

CREATE FUNCTION udf_TownsWithTrains(@name VARCHAR(30))
RETURNS INT
         AS
	  BEGIN
		DECLARE @result INT

		       SELECT 
                              @result= COUNT( tr.Id)
			FROM Trains AS tr
			JOIN Towns AS ta ON tr.ArrivalTownId = ta.Id
			JOIN Towns AS td ON tr.DepartureTownId = td.Id
		       WHERE ta.[Name] = @name OR td.[Name] = @name

		RETURN @result
	  END
---------------------------------------------------------------------------------

12. Search Passengers travelling to Specific Town

CREATE OR ALTER PROCEDURE usp_SearchByTown(@townName VARCHAR(30))
    AS
	BEGIN
	  SELECT 
		p.[Name] AS PassengerName,
		tic.DateOfDeparture,
		tr.HourOfDeparture
	   FROM Passengers AS p	  
	   JOIN Tickets AS tic ON tic.PassengerId =p.Id
	   JOIN Trains AS tr ON tr.Id =tic.TrainId
	   JOIN Towns AS tw ON tr.ArrivalTownId = tw.Id 
	  WHERE tw.[Name] = @townName
       ORDER BY tic.DateOfDeparture DESC,
		p.[Name]

	END


