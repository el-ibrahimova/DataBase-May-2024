01. Database design 

CREATE DATABASE Airport
GO

USE Airport 
GO

CREATE TABLE Passengers(
Id INT PRIMARY KEY IDENTITY, 
FullName VARCHAR(100) UNIQUE  NOT NULL,
Email VARCHAR(50) UNIQUE NOT NULL
)

CREATE TABLE Pilots (
Id INT PRIMARY KEY IDENTITY,
FirstName VARCHAR(30) UNIQUE NOT NULL,
LastName VARCHAR(30) UNIQUE NOT NULL,
Age TinyInt NOT NULL CHECK (Age>=21  AND  Age <=62),
Rating FLOAT CHECK (Rating >=0.0 AND Rating <=10.0)
)

CREATE TABLE AircraftTypes(
Id INT PRIMARY KEY IDENTITY,
TypeName VARCHAR(30) UNIQUE NOT NULL
)

CREATE TABLE Aircraft(
Id INT PRIMARY KEY IDENTITY,
Manufacturer VARCHAR(25) NOT NULL,
Model VARCHAR(30) NOT NULL,
[Year] INT NOT NULL,
FlightHours INT,
Condition CHAR NOT NULL,
TypeId INT FOREIGN KEY REFERENCES AircraftTypes(Id) NOT NULL
)

CREATE TABLE PilotsAircraft(
AircraftId INT FOREIGN KEY REFERENCES Aircraft(Id) NOT NULL,
PilotId INT FOREIGN KEY REFERENCES Pilots(Id) NOT NULL,
PRIMARY KEY (AircraftId, PilotId)
)

CREATE TABLE Airports(
Id INT PRIMARY KEY IDENTITY,
AirportName VARCHAR(70) UNIQUE NOT NULL,
Country VARCHAR(100) UNIQUE NOT NULL
)

CREATE TABLE FlightDestinations (
Id INT PRIMARY KEY IDENTITY,
AirportId INT FOREIGN KEY REFERENCES Airports(Id) NOT NULL,
[Start] DATETIME NOT NULL,
AircraftId INT FOREIGN KEY REFERENCES Aircraft(Id) NOT NULL,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL,
TicketPrice DECIMAL(18,2) DEFAULT 15 NOT NULL
)
-----------------------------------------------------------------------------------------------

02. Insert

INSERT INTO Passengers (FullName, Email)
	SELECT 
	CONCAT(FirstName, ' ', LastName),         -- insert into column FullName
	CONCAT(FirstName, LastName, '@gmail.com') -- insert into column Email
	FROM Pilots
	WHERE Id BETWEEN 5 AND 15 
------------------------------------------------------------------------------------------------

03. Update 

UPDATE Aircraft
   SET Condition = 'A'
 WHERE Condition IN ('C', 'B')
   AND (FlightHours <=100 OR FlightHours IS NULL)
   AND [Year] >=2013
--------------------------------------------------------------------------------------------------

04. Delete

-- find the passenger ID 
SELECT *
FROM Passengers
WHERE LEN(FullName)<=10

-- delete 
DELETE
FROM Passengers
WHERE Id IN (91, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120)
-------------------------------------------------------------------------------------------------

05. Aircraft

SELECT 
Manufacturer, Model, FlightHours, Condition
FROM Aircraft
ORDER BY FlightHours DESC
----------------------------------------------------------------------------------------------

06. Pilots and Aircraft

  SELECT 
	 p.FirstName, 
	 p.LastName, 
	 a.Manufacturer, 
	 a.Model, 
	 a.FlightHours
    FROM Pilots AS p
    JOIN PilotsAircraft AS pa ON p.Id = pa.PilotId
    JOIN Aircraft AS a ON a.Id = pa.AircraftId
   WHERE a.FlightHours IS NOT NULL 
     AND a.FlightHours <304
ORDER BY a.FlightHours DESC,
         p.FirstName
-------------------------------------------------------------------------------------------------

07. Top 20 Flight Destinations

  SELECT TOP 20
	 f.Id AS DestinationId,
	 f.[Start],
	 p.FullName,
	 a.AirportName,
	 f.TicketPrice
    FROM FlightDestinations AS f
    JOIN Passengers AS p ON f.PassengerId =p.Id
    JOIN Airports AS a ON f.AirportId=a.Id
   WHERE DATEPART(DAY, [Start]) %2 = 0
ORDER BY f.TicketPrice DESC,
         a.AirportName
--------------------------------------------------------------------------------------------------

08. Number of Flights for Each Aircraft

  SELECT 
         a.Id AS AircraftId,
         a.Manufacturer,
         a.FlightHours,
         COUNT(f.Id) AS FlightDestinationsCount,
         ROUND(AVG(f.TicketPrice),2) AS AvgPrice
    FROM Aircraft AS a
    JOIN FlightDestinations AS f ON a.Id = f.AircraftId
   GROUP BY a.Id, a.Manufacturer, a.FlightHours
  HAVING COUNT(f.Id) >=2
ORDER BY COUNT(f.Id) DESC,
         a.Id
------------------------------------------------------------------------------------------------

09. Regular Passengers

  SELECT 
	 p.FullName,
	 COUNT(a.Id) AS CountOfAircraft,
	 SUM(d.TicketPrice) AS TotalPayed
    FROM Passengers AS p
    JOIN FlightDestinations AS d ON p.Id=d.PassengerId
    JOIN Aircraft AS a ON d.AircraftId = a.Id
   WHERE SUBSTRING(p.FullName, 2, 1) LIKE 'a'
GROUP BY p.FullName
  HAVING COUNT(a.Id) >1
ORDER BY p.FullName
------------------------------------------------------------------------------------------------

10. Full Info for Flight Destinations

  SELECT 
         ap.AirportName,
         d.[Start] AS DayTime,
         d.TicketPrice,
         p.FullName,
         a.Manufacturer, 
         a.Model
    FROM FlightDestinations AS d
    JOIN Aircraft AS a ON d.AircraftId = a.Id
    JOIN Airports AS ap ON d.AirportId=ap.Id
    JOIN Passengers AS p ON d.PassengerId = p.Id
   WHERE CAST(d.[Start] AS TIME) BETWEEN '06:00' AND '20:00'
     AND d.TicketPrice >2500
ORDER BY a.Model
-----------------------------------------------------------------------------------------------

11. Find all Destinations by Email Address

CREATE FUNCTION udf_FlightDestinationsByEmail(@email VARCHAR(50)) 
RETURNS INT 
	AS
	BEGIN
	RETURN
	 (    SELECT
		     COUNT(d.Id)
		FROM Passengers AS p
		JOIN FlightDestinations AS d ON p.Id=d.PassengerId
	       WHERE p.Email =@email		
	  )
	END
-------------------------------------------------------------------------------------------------

12. Full Info for Airports

CREATE PROCEDURE usp_SearchByAirportName(@AirportName VARCHAR(70))
AS
BEGIN
	SELECT
	       ap.AirportName,
	       p.FullName,
		CASE
		   WHEN d.TicketPrice<=400 THEN 'Low'
		   WHEN d.TicketPrice BETWEEN 401 AND 1500 THEN 'Medium'
		   ELSE 'High'
		END
	       AS LevelOfTicketPrice,
	       a.Manufacturer,
	       a.Condition,
	       t.TypeName
	  FROM Airports AS ap
	  JOIN FlightDestinations AS d ON d.AirportId=ap.Id
	  JOIN Passengers AS p ON d.PassengerId = p.Id
	  JOIN Aircraft AS a ON a.Id = d.AircraftId
	  JOIN AircraftTypes AS t ON a.TypeId = t.Id
	 WHERE ap.AirportName = @AirportName
      ORDER BY a.Manufacturer, p.FullName
END
